def cpvec(x):#создание копии вектора
    return x[:]
def cpmat(m):#создание копии матрицы
    m1 = []#создаем пустую матрицу
    for i in range(len(m)):#перебираем все строки и делаем копии этих строк
        m1.append(m[i][:])
    return m1
def LU(m):#подготовка модифицированной матрицы для решения  ситемы методом Гаусса
    n = len(m)
    m1 = cpmat(m)#делаем копию
    for i in range(n):# перебираем
        for j in range(i+1,n):#делим остальные элементы строки на диагональный элемент
            m1[i][j] /= m1[i][i]
        for k in range(i+1,n):
            for j in range(i+1,n):#вычитаем строку с диагональным элементом из остальных строк
                m1[k][j] -= m1[k][i]*m1[i][j]
    return m1
def solv(m,y):# решение системы методом Гаусса, где m модифицированная матрица
    n = len(m)
    x = cpvec(y)#делаем копию
    for i in range(0,n):
        x[i] /= m[i][i]#делим элемент вектра на диагональный элемент матрицы
        for k in range(i+1,n):#прямой ход метода Гаусса
            x[k] -= x[i]*m[k][i]
    for i in range(n-1,0,-1):
        for k in range(i-1,-1,-1):#обратный ход метода Гаусса
            x[k] -= x[i]*m[k][i]
    return x
def mul(m,x):# умножение матрцы m на вектор x
    n = len(m)
    y = [];
    for i in range(0,n):
        s = 0
        for j in range(0,n):
            s += m[i][j]*x[j]
        y.append(s)
    return y
m = [[1.0,2.0,4.0],[2.0,1.0,7.0],[2.0,1.0,8.0]]#матрица коэфицентов
m1 = LU(m)# пересчитываем модифицированную матрицу
print m
print m1
b =[1.0,3.0,5.0]# заводим столбец свободных членов
x = solv(m1,b)#
print "x ",x
b1 = mul(m,x)
print "b1 ",b1